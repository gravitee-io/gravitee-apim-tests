node() {
    try {
        def nodeHome = tool 'NodeJS7'
        withEnv(["PATH+NODE=${nodeHome}/bin"]) {
            stage("Clean mongodb") {
                sh "docker run -i --link demo_nightly_mongodb_1:mongo --rm mongo:4.2 sh -c \"exec mongo demo_nightly_mongodb_1/gravitee --eval 'db.dropDatabase();'\""
            }

            stage("Restart the management-api") {
//              sleep to avoid to stop the start and creation of default roles...etc
                sleep 30
                sh "docker restart demo_nightly_managementapi_1 demo_nightly_gateway_1"
//              sleep to wait for API to start
                sleep 30
            }

            stage("Prepare") {
                checkout scm
                sh "npm install newman"
            }

            stage("Restart the management-ui and portal-ui") {
//              restart to override traefik path prefix config of REST API
                sh "docker restart demo_nightly_managementui_1 demo_nightly_portalui_1"
            }

            stage("Run tests for issues") {
                sh "node node_modules/newman/bin/newman.js run postman/test/Gravitee.io-Issues.postman_collection.json -e postman/env/Gravitee.io-Nightly-Environment.json --bail"
            }

            stage("Run tests for portal authorizations") {
                sh "node node_modules/newman/bin/newman.js run postman/test/graviteeio-apim-portal-authorizations-collection.json -e postman/env/Gravitee.io-Nightly-Environment.json --bail"
            }

            stage("Run tests for portal errors") {
                sh "node node_modules/newman/bin/newman.js run postman/test/graviteeio-apim-portal-errors-collection.json -e postman/env/Gravitee.io-Nightly-Environment.json --bail"
            }

            stage("Run tests for portal subscription") {
                sh "node node_modules/newman/bin/newman.js run postman/test/graviteeio-apim-portal-subscription-collection.json -e postman/env/Gravitee.io-Nightly-Environment.json --bail"
            }

            stage("Configuration - prepare showcase") {
                sh "node node_modules/newman/bin/newman.js run postman/configuration/Gravitee.io-configuration.json -e postman/env/Gravitee.io-Nightly-Environment.json --bail"
            }

            stage("Create 100 applications") {
                sh "node node_modules/newman/bin/newman.js run postman/test/Gravitee.io-Test.Suite-Create.Application.postman_collection.json -e postman/env/Gravitee.io-Nightly-Environment.json -n 100 --bail"
            }

            stage("Create showcase categories") {
                sh "node node_modules/newman/bin/newman.js run postman/showcase/Gravitee.io-Showcase-Create.Category.json -e postman/env/Gravitee.io-Nightly-Environment.json -d postman/showcase/categories.json --bail"
            }

            stage("Create showcase APIs") {
                sh "node node_modules/newman/bin/newman.js run postman/showcase/Gravitee.io-Showcase-Policy.HTML.to.JSON.postman_collection.json -e postman/env/Gravitee.io-Nightly-Environment.json --bail"
                sh "node node_modules/newman/bin/newman.js run postman/showcase/Gravitee.io-Showcase-import-API-swagger.postman_collection.json -e postman/env/Gravitee.io-Nightly-Environment.json --bail"
// {envId} not handled yet                 sh "node node_modules/newman/bin/newman.js run postman/showcase/Gravitee.io-Showcase-import-API-OAI.postman_collection.json -e postman/env/Gravitee.io-Nightly-Environment.json --bail"
            }

            stage("Create 100 started apis") {
                sh "node node_modules/newman/bin/newman.js run postman/test/Gravitee.io-Test.Suite-Create.And.Start.Api.postman_collection.json -e postman/env/Gravitee.io-Nightly-Environment.json --folder create.category --bail"
                sh "node node_modules/newman/bin/newman.js run postman/test/Gravitee.io-Test.Suite-Create.And.Start.Api.postman_collection.json -e postman/env/Gravitee.io-Nightly-Environment.json -d postman/showcase/categories.json --folder create.api -n 100 --bail"
            }

            stage("Update admin avatar") {
                sh "node node_modules/newman/bin/newman.js run postman/showcase/Gravitee.io-Showcase-Update.User.Avatar.json -e postman/env/Gravitee.io-Nightly-Environment.json --bail"
            }

            stage("Create Mongodb indexes") {
                sh "wget -O /tmp/create-index.js https://raw.githubusercontent.com/gravitee-io/gravitee-repository-mongodb/master/src/main/resources/scripts/create-index.js"
                sh "docker cp /tmp/create-index.js demo_nightly_mongodb_1:/tmp/create-index.js"
                sh "docker exec -i demo_nightly_mongodb_1 mongo gravitee < /tmp/create-index.js"
            }
        }
    } catch (e) {
        currentBuild.result = "FAILED"
        sh "git log --format=short -n1 HEAD > GIT_LOG"
        def git_log = readFile encoding: 'UTF-8', file: 'GIT_LOG'

        slackSend (
                color: '#FF0000',
                message: ":poop: ${env.JOB_NAME} " +
                        "<${env.BUILD_URL}console|[#${env.BUILD_NUMBER}]>\n\r" +
                        "```${git_log}```")
        throw e
    }
}
